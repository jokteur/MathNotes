#include "block.h"
#define IMGUI_DEFINE_MATH_OPERATORS
#include "imgui_internal.h"
#include "rich_text/chars/im_char.h"

namespace RichText {
    bool AbstractBlock::hk_build_delimiter_chars() {
        return true;
    }
    void AbstractBlock::hk_draw_main(Draw::DrawList& draw_list, float& cursor_y_pos, float x_offset, const Rect& boundaries) {
        ImVec2 padding_before(m_style.h_paddings.x, m_style.v_paddings.x);

        // Draw all the chars generated by the block
        if (isInsideRectY(m_position, boundaries)) {
            for (auto ptr : m_draw_chars) {
                ptr->draw(draw_list, m_position + padding_before);
            }
        }
        // Update cursor from wrapper
        cursor_y_pos += m_style.v_margins.x;
        // Draw all childrens (blocks)
        for (auto ptr : m_childrens) {
            if (ptr->m_category == C_BLOCK)
                ptr->draw(draw_list, cursor_y_pos, x_offset, boundaries);
        }
        cursor_y_pos += m_style.v_margins.y;

        m_show_boundaries = true;
    }
    void AbstractBlock::hk_draw_background(Draw::DrawList& draw_list) {
        if (m_style.bg_color != Colors::transparent) {
            draw_list.SetCurrentChannel(0);
            auto cursor_pos = ImGui::GetCursorScreenPos();
            ImVec2 p_min = cursor_pos + m_position;
            ImVec2 p_max = cursor_pos + m_position + m_dimensions;
            draw_list->AddRectFilled(p_min, p_max, m_style.bg_color, 5.f);
        }
    }
    void AbstractBlock::hk_build_widget(float x_offset) {
    }
    void AbstractBlock::setWidth(float width) {
        float internal_size = m_dimensions.x - m_style.h_paddings.x - m_style.h_paddings.y;
        m_wrapper.setWidth(internal_size);
        m_window_width = width;
        for (auto ptr : m_childrens) {
            ptr->setWidth(width);
        }
    }

    void AbstractLeafBlock::hk_draw_main(Draw::DrawList& draw_list, float& cursor_y_pos, float x_offset, const Rect& boundaries) {
        ImVec2 padding_before(m_style.h_paddings.x, m_style.v_paddings.x);

        // Draw all the chars generated by the block
        if (isInsideRectY(m_position, boundaries)) {
            for (auto ptr : m_draw_chars) {
                ptr->draw(draw_list, m_position + padding_before);
            }
        }
        // Draw all childrens (spans)
        for (auto ptr : m_childrens) {
            if (ptr->m_category != C_SPAN) {
                break;
            }
            ptr->draw(draw_list, cursor_y_pos, x_offset, boundaries);
        }
        // Update cursor from wrapper
        cursor_y_pos += m_wrapper.getHeight() + m_style.v_margins.x;
        // Draw all childrens (blocks)
        for (auto ptr : m_childrens) {
            if (ptr->m_category == C_BLOCK)
                ptr->draw(draw_list, cursor_y_pos, x_offset, boundaries);
        }

        m_show_boundaries = true;
    }

    void AbstractLeafBlock::hk_build_widget(float x_offset) {
        if (m_widget_dirty) {
            m_wrap_chars.clear();
            m_draw_chars.clear();

            bool success = true;

            for (auto ptr : m_childrens) {
                if (ptr->m_category != C_SPAN) {
                    break;
                }
                auto res = ptr->add_chars(m_wrap_chars);
                if (!res) {
                    success = false;
                }
            }

            m_wrapper.clear();
            float internal_size = m_window_width - x_offset - m_style.h_paddings.x - m_style.h_paddings.y;
            m_wrapper.setWidth(internal_size);
            m_wrapper.setLineSpace(m_style.line_space);
            m_wrapper.setString(m_wrap_chars);

            if (success)
                m_widget_dirty = false;
        }
    }

    /* ===========
     * HiddenSpace
     * =========== */
    void HiddenSpace::hk_build_widget(float x_offset) {
        if (m_widget_dirty) {
            m_wrap_chars.clear();
            m_draw_chars.clear();

            bool success = true;

            success = add_chars(m_wrap_chars);

            m_wrapper.clear();
            float internal_size = m_window_width - x_offset - m_style.h_paddings.x - m_style.h_paddings.y;
            m_wrapper.setWidth(internal_size);
            m_wrapper.setLineSpace(m_style.line_space);
            m_wrapper.setString(m_wrap_chars);

            if (success)
                m_widget_dirty = false;
        }
    }
    bool HiddenSpace::add_chars(std::vector<WrapCharPtr>& wrap_chars) {
        bool success = true;
        m_draw_chars.clear();
        m_is_selected = true;

        if (m_is_selected) {
            auto& bounds = m_text_boundaries.front();
            auto res = Utf8StrToImCharStr(m_ui_state, wrap_chars, m_draw_chars, m_safe_string, bounds.pre, bounds.end, m_special_chars_style, true);
            if (!res) {
                success = false;
            }
        }
        return success;
    }
}